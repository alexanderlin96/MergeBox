This project needs to be run as 'localhost', a lot of url redirects are to http://localhost/ and http://localhost/dump.php

This project was based heavily on pset7 utilizing many of it's functions like query and render. I used pset7 because much of the login was implemented so I could focus on the bulk of my project which was to get my website interfacing with the Dropbox API. 

First thing is first, Dropbox API. It is located in lib folder. OAuth2 was a pain to integrate but it was doable. From http://localhost/linkaccount.php, clicking the dropbox button started the OAuth process. The API generates a url which the client visits to authenticate the app. Then it redirects back to a specified page listed on the Dropbox Developer Console as http://localhost/dump.php. There dump.php will take the $_GET parameters and complete the Authentication. The information is then stored into the mysql table for later use. The dropbox_id and dropbox_accessToken are needed to do anything for the user. Also for linked accounts, they are stored on a separate table with a foreign key referencing their user_id. This way each user can have (theoretically) as many dropbox accounts as they want. Also as a side note, the dropbox api technically won't run if you are in a 32bit enviroment. It requires a 64bit enviorment since file sizes as bytes tend to be very big. I managed to get around this by commenting out lines 19-22 in the Dropbox API where it checks for max integer. If you are running this website in a 64bit enviorment, go ahead and uncomment that section, otherwise leave it as it is. 

You can access the user dropbox information by making a client object in the dropbox api. After you can call something like getAccountInfo() to get email or quota(space a user has) and other misc information. I've decided that instead of storing all that information into the mysql table, I'll just call the Dropbox api to get that information since user information is bound to change. 

I basically used the table that pset7 implemented but changed some of the css. The table will highlight the row whenever there is a mouse hovering over the row. Along with some javascript, I made each row have a href, so that when you click it, it will bring you either to the folder directory or download the file. 
To list the files, a call to the dropbox function getMetadataWithChildren("path") is called where '/' denotes the root folder of an account. Path is passed as a GET parameter on index.php. This way I can parse the path and pass it into the DRopbox funtion to get folder contents. On the index page I generated all the contents of the root folder by running a foreach with each of the accounts linked to a user. This way all the folders of the accounts' root is listed. I also added a link on the menu on the left where if you click the email address of the dropbox account you want to see, you will go to a page showing only the root contents of that account. The reason why this was implemented was because of the upload functionality. It doesn't make sense to upload from index.php because how would you know what account to upload to? So unless you are in a directory or on the root directory of a dropbox account, clicking upload files will generate an alert.

In order to get chunked uploads working, I had to use another API called plupload. I just added this api to the js folder in public since much of it is js. This would allow me to do chunk uploading which I need to later development. Basically by using plupload, I can send a large file in small chunks and reassemble them on the server or upload them to Dropbox. I chose to reassmble them first on the server then upload because uploading them individually would have required more Dropbox code, which I feel like with the time constraint, I do not have time for. The file is assembled in the folder plupload in public and then uploaded to dropbox. Then the file is delete after upload is completed. Also by using $_SERVER['HTTP_REFERER'], I was able to see where I should upload the file to in upload.php. I put the build of the javascript that was needed for plupload because it was the easiest to do. I will use this for later development since I can combine the chunks however I want, I can upload those chunks as individual files to dropbox. This way I can store large files across accounts. 

As for styling, I was able to replace the CS50 finance logo and put my own logo in the browser tab. I also populated style.css with a lot of tags to specify aesthetics. The one cool thing I did was the side menu. It travels with you as you scroll down. I didn't account for the fact that if someone linked like 20 accounts how would the sidebar fit, but for now I am hoping that doesn't happen. Also I added function format_bytes($bytes) to config.php. Dropbox gives the quota of each user in bytes so I had to convert them to something readable. In the includes folder also lies app-info.json which is the key and secret of my app on dropbox. Please don't give that out to other people. 

I also neglected error handling. If you change the url (which everything depends on), error messages will pop up a lot. I haven't yet dealt with them. Another error happens when you are in the middle of OAuth and you click the back button. That will generate a big error message. 

Also on the server side, I tried getting this to work on ngrok, but just due to how ngrok tunnels, dropbox refuses to redirect back to my website's dump page. I'm guessing ngrok has some redirection of their own and dropbox doesnt like that. I even put ngrok down as a trusted url redirection on my app. This is why I had to keep my website on localhost. Also as a last note, I originally called this app Mergi, which is why the sql database is called that and is why the dropbox app is also called that.  
